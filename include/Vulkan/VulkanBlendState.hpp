#ifndef _VULKAN_BLEND_STATE_HPP_
#define _VULKAN_BLEND_STATE_HPP_

#include "Graphics/BlendState.hpp"
#include <vulkan/vulkan.h>

namespace Eternal
{
	namespace Graphics
	{
		const VkBlendFactor VULKAN_BLENDS[] =
		{
			VK_BLEND_FACTOR_ZERO,
			VK_BLEND_FACTOR_ONE,

			VK_BLEND_FACTOR_SRC_COLOR,
			VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
			VK_BLEND_FACTOR_SRC_ALPHA,
			VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,

			VK_BLEND_FACTOR_DST_COLOR,
			VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
			VK_BLEND_FACTOR_DST_ALPHA,
			VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,

			VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,

			VK_BLEND_FACTOR_CONSTANT_COLOR,
			VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
			VK_BLEND_FACTOR_CONSTANT_ALPHA,
			VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,

			VK_BLEND_FACTOR_SRC1_COLOR,
			VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
			VK_BLEND_FACTOR_SRC1_ALPHA,
			VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA
		};
		
		ETERNAL_STATIC_ASSERT(ETERNAL_ARRAYSIZE(VULKAN_BLENDS) == BLEND_COUNT, "Vulkan Blends declaration not complete"); 

		const VkBlendOp VULKAN_BLEND_OPS[] =
		{
			VK_BLEND_OP_ADD,
			VK_BLEND_OP_SUBTRACT,
			VK_BLEND_OP_REVERSE_SUBTRACT,
			VK_BLEND_OP_MIN,
			VK_BLEND_OP_MAX
		};

		ETERNAL_STATIC_ASSERT(ETERNAL_ARRAYSIZE(VULKAN_BLEND_OPS) == BLEND_OP_COUNT, "Vulkan Blend operators declaration not complete");

		const VkLogicOp VULKAN_LOGIC_OPS[] =
		{
			VK_LOGIC_OP_CLEAR,
			VK_LOGIC_OP_SET,
			VK_LOGIC_OP_COPY,
			VK_LOGIC_OP_COPY_INVERTED,
			VK_LOGIC_OP_NO_OP,
			VK_LOGIC_OP_INVERT,
			VK_LOGIC_OP_AND,
			VK_LOGIC_OP_NAND,
			VK_LOGIC_OP_OR,
			VK_LOGIC_OP_NOR,
			VK_LOGIC_OP_XOR,
			VK_LOGIC_OP_EQUIVALENT,
			VK_LOGIC_OP_AND_REVERSE,
			VK_LOGIC_OP_AND_INVERTED,
			VK_LOGIC_OP_OR_REVERSE,
			VK_LOGIC_OP_OR_INVERTED
		};

		ETERNAL_STATIC_ASSERT(ETERNAL_ARRAYSIZE(VULKAN_LOGIC_OPS) == LOGIC_OP_COUNT, "Vulkan Logic operators declaration not complete");
	}
}

#endif
