#pragma once

namespace Eternal
{
	namespace Graphics
	{
		enum class ShaderType
		{
			SHADER_TYPE_VERTEX = 0,
			SHADER_TYPE_HULL,
			SHADER_TYPE_DOMAIN,
			SHADER_TYPE_GEOMETRY,
			SHADER_TYPE_PIXEL,
			SHADER_TYPE_COMPUTE,
			SHADER_TYPE_MESH,
			SHADER_TYPE_AMPLIFICATION,
			SHADER_TYPE_COUNT
		};

		enum class ShaderTypeFlags
		{
			SHADER_TYPE_FLAGS_COMPUTE				= 0x0,
			SHADER_TYPE_FLAGS_VERTEX				= 0x1,
			SHADER_TYPE_FLAGS_HULL					= 0x2,
			SHADER_TYPE_FLAGS_DOMAIN				= 0x4,
			SHADER_TYPE_FLAGS_GEOMETRY				= 0x8,
			SHADER_TYPE_FLAGS_PIXEL					= 0x10,
			SHADER_TYPE_FLAGS_MESH					= 0x20,
			SHADER_TYPE_FLAGS_AMPLIFICATION			= 0x40,

			SHADER_TYPE_FLAGS_VERTEX_PIXEL			= SHADER_TYPE_FLAGS_VERTEX | SHADER_TYPE_FLAGS_PIXEL,
			SHADER_TYPE_FLAGS_MESH_PIXEL			= SHADER_TYPE_FLAGS_MESH | SHADER_TYPE_FLAGS_PIXEL,
			SHADER_TYPE_MESH_AMPLIFICATION_PIXEL	= SHADER_TYPE_FLAGS_MESH | SHADER_TYPE_FLAGS_AMPLIFICATION | SHADER_TYPE_FLAGS_PIXEL,

			SHADER_TYPE_FLAGS_UNDEFINED
		};

		ShaderTypeFlags operator|(_In_ const ShaderTypeFlags& InLeftShaderTypeFlags, _In_ const ShaderTypeFlags& InRightShaderTypeFlags);
		ShaderTypeFlags operator&(_In_ const ShaderTypeFlags& InLeftShaderTypeFlags, _In_ const ShaderTypeFlags& InRightShaderTypeFlags);
	}
}
